for (j in 1:length(author_list[[i]])) {
if (length(author_list[[i]]) == 1) {
break
}
if (j == 1) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=0, stop=nchar(author_list[[i]][j])-1)
}
else if (j == length(author_list[[i]])) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j]))
}
else {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j])-1)
}
}
}
# Citations by author
unlist_of_authors <- unlist(author_list)
# Citations by title word
title_word_list <- tolower(unlist(strsplit(citations$title, split = " ")))
comma_words <- grep(",",title_word_list, fixed = TRUE)
comma_words <- c(comma_words, grep(":",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep(".",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep("?",title_word_list, fixed = TRUE))
comma_words <- unique(comma_words)
for (i in comma_words) {
title_word_list[i] <- substr(title_word_list[i], start=1, stop=nchar(title_word_list[i])-1)
}
prepositions <- which(title_word_list %in% c("to","a","of","in","i","for","and","its","the","is"))
title_word_list <- title_word_list[-prepositions]
# Citations by year
year_of_citations <- citations$year
# Citations by journal
journal_of_citations <- citations$journal
references <- data.frame(read.delim("crumpbib.bib", sep = "@"))
references$X <- as.character((references$X))
num_citations <- length(unique(levels(references$X.1))[-1])
article_id <- as.character(unique(levels(references$X.1))[-1])
references$X.1 <- as.character((references$X.1))
for(i in 1:length(article_id)) {
article_id[i] <- substr(article_id[i], start = 9, stop = nchar(article_id[i])-1)
}
# Generate NA values for fields that may not have relevant information
citations <- data.frame(article_id = article_id,
title = rep(NA,num_citations),
author = rep(NA,num_citations),
journal = rep(NA,num_citations),
pages = rep(NA,num_citations),
year = rep(NA,num_citations))
loop_references <- references
loop_count <- 0
for (i in 1:num_citations) {
for (j in 1:100) {
if (length(loop_references) == 0) {
break
}
if (loop_references$X[j] == "}") {
loop_count <- loop_count + 1
loop_references <- loop_references[-c(1:loop_count),]
loop_count <- 0
break
}
if (substr(loop_references$X[j],start=3,stop=7) == "title") {
citations$title[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=8) == "author") {
citations$author[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=9) == "journal") {
citations$journal[i] <- substr(loop_references$X[j], start=13, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=7) == "pages") {
citations$pages[i] <- substr(loop_references$X[j], start=11, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=6) == "year") {
citations$year[i] <- substr(loop_references$X[j], start=10, stop=nchar(loop_references$X[j])-2)
}
loop_count <- loop_count + 1
print(loop_count)
}
}
author_list = strsplit(citations$author, split = "and")
for (i in 1:length(author_list)) {
for (j in 1:length(author_list[[i]])) {
if (length(author_list[[i]]) == 1) {
break
}
if (j == 1) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=0, stop=nchar(author_list[[i]][j])-1)
}
else if (j == length(author_list[[i]])) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j]))
}
else {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j])-1)
}
}
}
# Citations by author
unlist_of_authors <- unlist(author_list)
# Citations by title word
title_word_list <- tolower(unlist(strsplit(citations$title, split = " ")))
comma_words <- grep(",",title_word_list, fixed = TRUE)
comma_words <- c(comma_words, grep(":",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep(".",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep("?",title_word_list, fixed = TRUE))
comma_words <- unique(comma_words)
for (i in comma_words) {
title_word_list[i] <- substr(title_word_list[i], start=1, stop=nchar(title_word_list[i])-1)
}
prepositions <- which(title_word_list %in% c("to","a","of","in","i","for","and","its","the","is"))
title_word_list <- title_word_list[-prepositions]
# Citations by year
year_of_citations <- citations$year
# Citations by journal
journal_of_citations <- citations$journal
references <- data.frame(read.delim("crumpbib.bib", sep = "@"))
references$X <- as.character((references$X))
num_citations <- length(unique(levels(references$X.1))[-1])
article_id <- as.character(unique(levels(references$X.1))[-1])
references$X.1 <- as.character((references$X.1))
for(i in 1:length(article_id)) {
article_id[i] <- substr(article_id[i], start = 9, stop = nchar(article_id[i])-1)
}
# Generate NA values for fields that may not have relevant information
citations <- data.frame(article_id = article_id,
title = rep(NA,num_citations),
author = rep(NA,num_citations),
journal = rep(NA,num_citations),
pages = rep(NA,num_citations),
year = rep(NA,num_citations))
loop_references <- references
loop_count <- 0
for (i in 1:num_citations) {
for (j in 1:100) {
if (length(loop_references) == 0) {
break
}
if (loop_references$X[j] == "}") {
loop_count <- loop_count + 1
loop_references <- loop_references[-c(1:loop_count),]
loop_count <- 0
break
}
if (substr(loop_references$X[j],start=3,stop=7) == "title") {
citations$title[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=8) == "author") {
citations$author[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=9) == "journal") {
citations$journal[i] <- substr(loop_references$X[j], start=13, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=7) == "pages") {
citations$pages[i] <- substr(loop_references$X[j], start=11, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=6) == "year") {
citations$year[i] <- substr(loop_references$X[j], start=10, stop=nchar(loop_references$X[j])-2)
}
loop_count <- loop_count + 1
print(loop_count)
}
}
author_list = strsplit(citations$author, split = "and")
for (i in 1:length(author_list)) {
for (j in 1:length(author_list[[i]])) {
if (length(author_list[[i]]) == 1) {
break
}
if (j == 1) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=0, stop=nchar(author_list[[i]][j])-1)
}
else if (j == length(author_list[[i]])) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j]))
}
else {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j])-1)
}
}
}
# Citations by author
unlist_of_authors <- unlist(author_list)
# Citations by title word
title_word_list <- tolower(unlist(strsplit(citations$title, split = " ")))
comma_words <- grep(",",title_word_list, fixed = TRUE)
comma_words <- c(comma_words, grep(":",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep(".",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep("?",title_word_list, fixed = TRUE))
comma_words <- unique(comma_words)
for (i in comma_words) {
title_word_list[i] <- substr(title_word_list[i], start=1, stop=nchar(title_word_list[i])-1)
}
prepositions <- which(title_word_list %in% c("to","a","of","in","i","for","and","its","the","is"))
title_word_list <- title_word_list[-prepositions]
# Citations by year
year_of_citations <- citations$year
# Citations by journal
journal_of_citations <- citations$journal
references <- data.frame(read.delim("crumpbib.bib", sep = "@"))
references$X <- as.character((references$X))
num_citations <- length(unique(levels(references$X.1))[-1])
article_id <- as.character(unique(levels(references$X.1))[-1])
references$X.1 <- as.character((references$X.1))
for(i in 1:length(article_id)) {
article_id[i] <- substr(article_id[i], start = 9, stop = nchar(article_id[i])-1)
}
# Generate NA values for fields that may not have relevant information
citations <- data.frame(article_id = article_id,
title = rep(NA,num_citations),
author = rep(NA,num_citations),
journal = rep(NA,num_citations),
pages = rep(NA,num_citations),
year = rep(NA,num_citations))
loop_references <- references
loop_count <- 0
for (i in 1:num_citations) {
for (j in 1:100) {
if (length(loop_references) == 0) {
break
}
if (loop_references$X[j] == "}") {
loop_count <- loop_count + 1
loop_references <- loop_references[-c(1:loop_count),]
loop_count <- 0
break
}
if (substr(loop_references$X[j],start=3,stop=7) == "title") {
citations$title[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=8) == "author") {
citations$author[i] <- substr(loop_references$X[j], start=13, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=9) == "journal") {
citations$journal[i] <- substr(loop_references$X[j], start=14, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=7) == "pages") {
citations$pages[i] <- substr(loop_references$X[j], start=11, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=6) == "year") {
citations$year[i] <- substr(loop_references$X[j], start=10, stop=nchar(loop_references$X[j])-2)
}
loop_count <- loop_count + 1
print(loop_count)
}
}
author_list = strsplit(citations$author, split = "and")
for (i in 1:length(author_list)) {
for (j in 1:length(author_list[[i]])) {
if (length(author_list[[i]]) == 1) {
break
}
if (j == 1) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=0, stop=nchar(author_list[[i]][j])-1)
}
else if (j == length(author_list[[i]])) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j]))
}
else {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j])-1)
}
}
}
# Citations by author
unlist_of_authors <- unlist(author_list)
# Citations by title word
title_word_list <- tolower(unlist(strsplit(citations$title, split = " ")))
comma_words <- grep(",",title_word_list, fixed = TRUE)
comma_words <- c(comma_words, grep(":",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep(".",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep("?",title_word_list, fixed = TRUE))
comma_words <- unique(comma_words)
for (i in comma_words) {
title_word_list[i] <- substr(title_word_list[i], start=1, stop=nchar(title_word_list[i])-1)
}
prepositions <- which(title_word_list %in% c("to","a","of","in","i","for","and","its","the","is"))
title_word_list <- title_word_list[-prepositions]
# Citations by year
year_of_citations <- citations$year
# Citations by journal
journal_of_citations <- citations$journal
references <- data.frame(read.delim("crumpbib.bib", sep = "@"))
references$X <- as.character((references$X))
num_citations <- length(unique(levels(references$X.1))[-1])
article_id <- as.character(unique(levels(references$X.1))[-1])
references$X.1 <- as.character((references$X.1))
for(i in 1:length(article_id)) {
article_id[i] <- substr(article_id[i], start = 9, stop = nchar(article_id[i])-1)
}
# Generate NA values for fields that may not have relevant information
citations <- data.frame(article_id = article_id,
title = rep(NA,num_citations),
author = rep(NA,num_citations),
journal = rep(NA,num_citations),
pages = rep(NA,num_citations),
year = rep(NA,num_citations))
loop_references <- references
loop_count <- 0
for (i in 1:num_citations) {
for (j in 1:100) {
if (length(loop_references) == 0) {
break
}
if (loop_references$X[j] == "}") {
loop_count <- loop_count + 1
loop_references <- loop_references[-c(1:loop_count),]
loop_count <- 0
break
}
if (substr(loop_references$X[j],start=3,stop=7) == "title") {
citations$title[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=8) == "author") {
citations$author[i] <- substr(loop_references$X[j], start=13, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=9) == "journal") {
citations$journal[i] <- substr(loop_references$X[j], start=14, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=7) == "pages") {
citations$pages[i] <- substr(loop_references$X[j], start=12, stop=nchar(loop_references$X[j])-2)
}
if (substr(loop_references$X[j],start=3,stop=6) == "year") {
citations$year[i] <- substr(loop_references$X[j], start=11, stop=nchar(loop_references$X[j])-2)
}
loop_count <- loop_count + 1
print(loop_count)
}
}
author_list = strsplit(citations$author, split = "and")
for (i in 1:length(author_list)) {
for (j in 1:length(author_list[[i]])) {
if (length(author_list[[i]]) == 1) {
break
}
if (j == 1) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=0, stop=nchar(author_list[[i]][j])-1)
}
else if (j == length(author_list[[i]])) {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j]))
}
else {
author_list[[i]][j] <- substr(author_list[[i]][j], start=2, stop=nchar(author_list[[i]][j])-1)
}
}
}
# Citations by author
unlist_of_authors <- unlist(author_list)
# Citations by title word
title_word_list <- tolower(unlist(strsplit(citations$title, split = " ")))
comma_words <- grep(",",title_word_list, fixed = TRUE)
comma_words <- c(comma_words, grep(":",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep(".",title_word_list, fixed = TRUE))
comma_words <- c(comma_words, grep("?",title_word_list, fixed = TRUE))
comma_words <- unique(comma_words)
for (i in comma_words) {
title_word_list[i] <- substr(title_word_list[i], start=1, stop=nchar(title_word_list[i])-1)
}
prepositions <- which(title_word_list %in% c("to","a","of","in","i","for","and","its","the","is"))
title_word_list <- title_word_list[-prepositions]
# Citations by year
year_of_citations <- citations$year
# Citations by journal
journal_of_citations <- citations$journal
title_word_list
table(year_of_citations)
table(journal_of_citations)
source('~/Desktop/Shiny_Web_App/crumpbib_processing.R', echo=TRUE)
source('~/Desktop/Shiny_Web_App/bib_processing.R', echo=TRUE)
title_word_list_a
title_word_list_b
year_of_citations_a
year_of_citations_b
# Citations by year
year_of_citations_b <- as.numeric(citations$year)
year_of_citations_b
# Citations by year
year_of_citations_a <- as.numeric(citations$year)
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
year_of_citations <- list(year_of_citations_a, year_of_citations_b)
year_of_citations
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
year_of_citations[[1]]
year_of_citations[[2]]
year_of_citations[[1]][1]
year_of_citations[[2]][1]
year_of_citations
year_of_citations[[2]]
year_of_citations_b
year_of_citations_a
source('~/Desktop/Shiny_Web_App/bib_processing.R', echo=TRUE)
source('~/Desktop/Shiny_Web_App/crumpbib_processing.R', echo=TRUE)
year_of_citations
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
year_of_citations[[1]]
year_of_citations[[1]][2005:20010]
year_of_citations[[1]][2005:2010]
year_of_citations[[1]]
year_of_citations[[1]][2005:2010]
year_of_citations[[1]][> 2005]
year_of_citations[[1]][year_of_citations > 2005]
year_of_citations[[1]]
is.numeric(year_of_citations)
year_of_citations[[1]][as.numeric(year_of_citations) > 2005]
year_of_citations_a
is.numeric(year_of_citations_a)
year_of_citations[[1]][as.numeric(year_of_citations) > 2005]
year_of_citations[[1]][unlist(year_of_citations) > 2005]
year_of_citations[[1]][2010 > unlist(year_of_citations) > 2005]
year_of_citations[[1]][unlist(year_of_citations[[1]]) > 2005 & unlist(year_of_citations[[1]]) < 2010]
runApp()
?selectInput
runApp()
?hist
runApp()
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
title_word_list_a
table(title_word_list_a)
a <- data.frame(table(title_word_list_a))
a
library(wordcloud2)
install.packages("wordcloud2")
library(wordcloud2)
wordcloud2(a)
wordcloud2(a, color = "random-light")
wordcloud2(a, color = "random-dark")
wordcloud2(a, color = "aquamarine3")
wordcloud2(a, color = "aquamarine3")
wordcloud2(a, color = "random-dark")
wordcloud2(a, color = "skyblue")
wordcloud2(a, color = "deepblue4")
wordcloud2(a, color = "deepskyblue4")
wordcloud2(a, color = "skyblue")
wordcloud2(a, color = "lightgreen")
wordcloud2(a, color = "mediumseagreen")
wordcloud2(a, color = "limegreen")
shiny::runApp()
wordcloud2(a, color = "limegreen")
wordcloud2(a, color = "limegreen")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
word_cloud
# Word cloud
word_cloud_a <- wordcloud2(title_word_list_a, color = "limegreen")
# Word cloud
library(wordcloud2)
word_cloud_a <- wordcloud2(title_word_list_a, color = "limegreen")
title_word_list_a
word_cloud_a <- wordcloud2(title_word_list_a, color = "limegreen")
word_cloud_a <- wordcloud2(data.frame(table(title_word_list_a)), color = "limegreen")
word_cloud_a
# Word cloud
library(wordcloud2)
word_cloud_b <- wordcloud2(data.frame(table(title_word_list_b)), color = "limegreen")
word_cloud_b
word_cloud <- list(word_cloud_a, word_cloud_b)
word_cloud[[1]]
shiny::runApp()
word_cloud[[2]]
